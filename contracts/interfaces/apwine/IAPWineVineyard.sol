
pragma solidity >=0.4.22 <0.7.3;


interface IAPWineVineyard{

    struct Registration{
        uint256 startIndex;
        uint256 scaledBalance;
    }

    /**
    * @notice Getter for the PAUSE vineyard parameter
    * @return true if new periods are not paused, false otherwise
    */  
    function PAUSED() external view returns(bool);

    /**
    * @notice Getter for the PERIOD vineyard parameter
    * @return returns the period length of the vineyard
    */  
    function PERIOD() external view returns(uint256);

    /**
    * @notice Intializer
    * @param _controllerAddress the address of the controller
    * @param _ibt the address of the corresponding ibt
    * @param _periodLength the length of the period (in days)
    * @param _tokenName the APWineIBT name
    * @param _tokenSymbol the APWineIBT symbol
    * @param _adminAddress the address of the ACR admin
    */  
    function initialize(address _controllerAddress, address _ibt, uint256 _periodLength,string memory _tokenName, string memory _tokenSymbol,address _adminAddress) external;

    /**
    * @notice Set future wallet address
    * @param _futureWalletAddress the address of the new future wallet
    * @dev needs corresponding permissions for sender
    */
    function setFutureWallet(address _futureWalletAddress) external;

    /**
    * @notice Set cellar address
    * @param _cellarAddress the address of the new cellar
    * @dev needs corresponding permissions for sender
    */
    function setCellar(address _cellarAddress) external;

    /**
    * @notice Sender registers an amount of ibt for the next period
    * @param _winegrower address to register to the future
    * @param _amount amount of ibt to be registered
    * @dev called by the controller only
    */
    function register(address _winegrower ,uint256 _amount) external;

    /**
    * @notice Sender unregisters an amount of ibt for the next period
    * @param _amount amount of ibt to be unregistered
    */
    function unregister(uint256 _amount) external;

    /**
    * @notice Sender unlock the locked funds corresponding to its apwibt holding
    * @param _amount amount of funds to unlocked
    * @dev will require transfer of fyt of the oingoing period corresponding to the funds unlocked
    */
    function withdrawLockFunds(uint _amount) external;

    /**
    * @notice Send the winemaker its owed fyt (and apwibt if there are some claimable)
    * @param _winemaker address of the winemaker to send the fyt to
    */
    function claimFYT(address _winemaker) external;

    /**
    * @notice Start a new period
    * @param _tokenName name for the new fyt
    * @param _tokenSymbol name for the new fyt
    * @dev needs corresponding permissions for sender
    */
    function startNewPeriod(string memory _tokenName, string memory _tokenSymbol) external;

    /**
    * @notice set the timestamp to start the next period
    * @param _nextPeriodTimestamp the timestamp to start the next period
    * @dev needs corresponding permissions for sender
    */
    function setNextPeriodTimestamp(uint256 _nextPeriodTimestamp) external;


    /**
    * @notice Check if a winemaker has fyt not claimed
    * @param _winemaker the winemaker to check
    * @return true if the winemaker can claim some fyt, false otherwise
    */
    function hasClaimableFYT(address _winemaker) external view returns(bool);

    /**
    * @notice Check if a winemaker has ibt not claimed
    * @param _winemaker the winemaker to check
    * @return true if the winemaker can claim some ibt, false otherwise
    */
    function hasClaimableAPWIBT(address _winemaker) external view returns(bool);

    /**
    * @notice Getter for winemaker registered amount 
    * @param _winemaker winemaker to return the registered funds of
    * @return the registered amount, 0 if no registrations
    * @dev the registration can be older than for the next period
    */
    function getRegisteredAmount(address _winemaker) external view returns(uint256);


    /**
    * @notice Getter for winemaker ibt amount that is unlockable
    * @param _winemaker winemaker to unlock the ibt from
    * @return the amount of ibt the winemaker can unlock
    */
    function getUnlockableFunds(address _winemaker) external view returns(uint256);


    /**
    * @notice Getter for yield that is generated by the winemaker funds during the current period
    * @param _winemaker winemaker to check the unrealised yield of
    * @return the yield (amout of ibt) currently generated by the locked funds of the winemaker
    */
    function getUnrealisedYield(address _winemaker) external view returns(uint256);

    /**
    * @notice Getter for the amount of apwibt that the winemaker can claim
    * @param _winemaker winemaker to check the check the claimable apwibt of 
    * @return the amount of apwibt claimable by the winemaker
    */
    function getClaimableAPWIBT(address _winemaker) external view returns(uint256);


    /**
    * @notice Getter for next period index
    * @return next period index
    * @dev index starts at 1
    */
    function getNextPeriodIndex() external view returns(uint256);

    /**
    * @notice Getter for next period timestamp
    * @return next period begining timestamp
    */
    function getNextPeriodTimestamp() external view returns(uint256);


    /**
    * @notice Getter for future wallet address
    * @return future wallet address
    */
    function getFutureWalletAddress() external view returns(address);

    /**
    * @notice Getter for cellar address
    * @return cellar address
    */
    function getCellarAddress() external view returns(address);


    /**
    * @notice Getter for the ibt address
    * @return ibt address
    */
    function getIBTAddress() external view returns(address);

    /**
    * @notice Getter for future apwibt address
    * @return apwibt address
    */
    function getAPWIBTAddress() external view returns(address);

    /**
    * @notice Getter for fyt address of a particular period
    * @param _periodIndex period index
    * @return fyt address
    */
    function getFYTofPeriod(uint256 _periodIndex) external view returns(address);


    /* Admin functions*/

    /**
    * @notice Pause registrations and the creation of new periods
    */
    function pausePeriods() external;

    /**
    * @notice Resume registrations and the creation of new periods
    */
    function resumePeriods() external;


}